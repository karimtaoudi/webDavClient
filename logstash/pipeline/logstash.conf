input {
    beats {
        client_inactivity_timeout => 1200 
        port => "5044"
        ssl  => false
    }
}

# filter {
#     mutate {
#         add_field => ["original_message", "%{message}"] #DEBUG: save original message
#     }

#     grok {
#         patterns_dir => ["usr/share/logstash/patterns"]
#         break_on_match => false
#         match => { "message" => "^\[%{SFCCDATE:logtimestamp}[^\]]*\]\s*%{GREEDYDATA:message}" } #Get timestamp in a nice format
#         match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"}
#         match => { "source" => "service-%{DATA:service}-blade"}

#         overwrite => ["message"]
#         add_tag => ["basic_parse"]
#     }

#     # Add indexing timestamp
#     ruby {
#         code => "event.set('indexTimestamp', event.get('@timestamp'))"
#     }

#     date {
#         locale => "en"
#         match => ["logtimestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
#         timezone => "Etc/GMT"
#         target => "@timestamp"
#     }

#     #Remove used date stuff
#     mutate {
#         remove_field => ["logtimestamp"]
#     }

#     if ([filename] =~ "^api-deprecation-.*") or
#        ([filename] =~ "^analyticsengine-.*") or
#        ([filename] =~ "^sysevent-.*") or
#        ([filename] =~ "^syslog-.*") or
#        ([filename] =~ "^jobs-.*") or
#        ([filename] == "tomcat.log") {
#         # Leave it as is
#     } else if ([filename] =~ "^error-.*"){ #Standard error logs
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|%{WORD:pipeline}\|%{DATA:sessionid} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA}\s+%{WTF}?%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}(\|%{DATA:path})? %{DATA:class} %{DATA:sitename} %{WORD} %{DATA:sessionid} %{DATA} %{DATA}\s+-\s+%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{DATA:threadid} %{DATA:class} %{DATA:sitename} %{WORD} %{DATA:sessionid} %{DATA} %{DATA}\s*-\s*%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER} %{DATA:class}(\s-)+\s+%{NUMBER}\s+-\s+%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{DATA:threadid} %{DATA:class}(\s-)+ %{NUMBER}\s*-?\s*%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }

#         if (![level]) {
#             mutate {
#                 add_field => {"level" => "ERROR"}
#             }
#         }
#     } else if ([filename] =~ "^info-.*") { #Standard info logs
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{DATA:threadid} %{DATA:class}(\s-)+ %{NUMBER}(\s-)*\s*%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }

#         if ![level] {
#             mutate{
#                 add_field => {"level" => "INFO"}
#             }
#         }
#     } else if ([filename] =~ "^warn-.*") {  #Standard warn logs
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{DATA:threadid}\|%{NUMBER}\|%{DATA:job}\|%{DATA:action} %{DATA:class}\s+%{WORD} JOB %{BASE16NUM} %{BASE16NUM} %{BASE16NUM}\s+(-\s*)?%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|%{WORD:pipeline}\|%{DATA:sessionid} %{DATA:class}\s+%{DATA} STOREFRONT %{DATA} %{DATA} %{DATA}\s+(-\s*)?%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{DATA:threadid} %{DATA:class}\s+system JOB %{BASE16NUM} %{BASE16NUM}\s+%{BASE16NUM}\s+(-\s*)?%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{DATA:threadid} %{DATA:class}(\s-)*\s+%{NUMBER}(\s-)*\s+%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }

#         if ![level] {
#             mutate{
#                 add_field => {"level" => "WARN"}
#             }
#         }
#     } else if ([filename] =~ "^debug-.*"){ #Standard debug logs
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|%{WORD:pipeline}\|%{DATA:sessionid} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA}\s+%{WTF}?%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }

#         if ![level] {
#             mutate{
#                 add_field => {"level" => "DEBUG"}
#             }
#         }
#     } else if ([filename] =~ "^quota-.*"){ #Quota logs
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^\[%{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|PipelineCall\|%{DATA:sessionid}\] %{GREEDYDATA:message}",
#                     "^\[[^]]+\] %{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }
#     } else if ([filename] =~ "^api-.*"){ #API logs
#         if([message] =~ "Pipeline(Dictionary)? usage violation"){ #Capture correct log levels on these
#             grok {
#                 patterns_dir => ["usr/share/logstash/patterns"]
#                 break_on_match => true
#                 match => {
#                     "message" => [
#                         "Pipeline usage violation: %{LOGLEVEL:level}: %{DATA}PIPELINE: %{DATA:pipeline} SITE: %{DATA}",
#                         "PipelineDictionary usage violation: %{LOGLEVEL:level}: %{DATA}PIPELET: %{DATA:pipelet} KEY: %{DATA:key}",
#                         "PipelineDictionary usage violation: %{LOGLEVEL:level}: %{DATA}PIPELET: %{DATA:pipelet}",
#                         "PipelineDictionary usage violation: TEMPLATE: ?%{DATA:template} KEY: %{DATA:key}"
#                     ]
#                 }
#             }
#         } else {
#             # Else, leave as is
#         }

#     } else if ([filename] =~ "^custom.*"){ #Custom log files
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|%{WORD:pipeline}\|%{DATA:sessionid} %{DATA:custom_logger}\s+%{WTF}?\s*%{GREEDYDATA:message}", #Custom website code logs
#                     "^%{LOGLEVEL:level}\s%{WORD}\|%{NUMBER}\s%{DATA:custom_logger}\s%{WTF}?%{GREEDYDATA:message}", #Custom job logs
#                     "^%{LOGLEVEL:level} %{DATA:threadid} %{DATA:custom_logger}\s+%{WTF}?%{GREEDYDATA:message}", #Custom service logs
#                     "^%{LOGLEVEL:level}\s*%{WTF}?%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }
#     } else if ([filename] =~ "^service-.*"){
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{DATA:threadid}(\|%{NUMBER})? %{DATA:request}\s+%{WTF}?\s*%{GREEDYDATA:message}",
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|%{WORD:pipeline}\|%{DATA:sessionid} %{DATA:request}\s+%{WTF}?\s*%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }
#     } else if ([filename] =~ "^staging-.*"){ #Standard debug logs
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level} %{WORD:servlet}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\|%{WORD:pipeline}\|%{DATA:sessionid} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA}\s+%{WTF}?%{GREEDYDATA:message}",
#                     "^%{DATA:threadid}\|%{NUMBER}\|%{DATA:sitename}\|%{DATA:action}\s+%{GREEDYDATA:message}",
#                     "^(%{LOGLEVEL:level} )?%{DATA:threadid}\s+%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }
#     } else {
#         grok {
#             patterns_dir => ["usr/share/logstash/patterns"]
#             break_on_match => true
#             match => {
#                 "message" => [
#                     "^%{LOGLEVEL:level}\s*%{WTF}?\s*%{GREEDYDATA:message}"
#                 ]
#             }

#             overwrite => ["message"]
#         }
#     }

#     #Set a default log level of INFO
#     if !("" in [level]) {
#         mutate {
#             add_field => ["level", "INFO"]
#             add_tag => ["logLevelDefaulted"]
#         }
#     }

#     if ("custom" in [filename]) {
#         mutate {
#             add_field => ["logtype", "custom"]
#         }
#     }
#     else {
#         mutate {
#             add_field => ["logtype", "system"]
#         }
#     }

# }

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"

    # stdout { codec => rubydebug }

    # exec {
    #     command => "echo 'Event: @%{@timestamp} from %{source}' "
    }
}